/*
 * This file is generated by jOOQ.
 */
package org.opm.busybeaver.jooq.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.opm.busybeaver.jooq.Keys;
import org.opm.busybeaver.jooq.Public;
import org.opm.busybeaver.jooq.tables.Beaverusers.BeaverusersPath;
import org.opm.busybeaver.jooq.tables.Comments.CommentsPath;
import org.opm.busybeaver.jooq.tables.Projects.ProjectsPath;
import org.opm.busybeaver.jooq.tables.Tasks.TasksPath;
import org.opm.busybeaver.jooq.tables.records.ProjectusersRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Projectusers extends TableImpl<ProjectusersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.projectusers</code>
     */
    public static final Projectusers PROJECTUSERS = new Projectusers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProjectusersRecord> getRecordType() {
        return ProjectusersRecord.class;
    }

    /**
     * The column <code>public.projectusers.user_project_id</code>.
     */
    public final TableField<ProjectusersRecord, Integer> USER_PROJECT_ID = createField(DSL.name("user_project_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.projectusers.user_id</code>.
     */
    public final TableField<ProjectusersRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.projectusers.project_id</code>.
     */
    public final TableField<ProjectusersRecord, Integer> PROJECT_ID = createField(DSL.name("project_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.projectusers.user_project_role</code>.
     */
    public final TableField<ProjectusersRecord, String> USER_PROJECT_ROLE = createField(DSL.name("user_project_role"), SQLDataType.VARCHAR(20).defaultValue(DSL.field(DSL.raw("'Member'::character varying"), SQLDataType.VARCHAR)), this, "");

    private Projectusers(Name alias, Table<ProjectusersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Projectusers(Name alias, Table<ProjectusersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.projectusers</code> table reference
     */
    public Projectusers(String alias) {
        this(DSL.name(alias), PROJECTUSERS);
    }

    /**
     * Create an aliased <code>public.projectusers</code> table reference
     */
    public Projectusers(Name alias) {
        this(alias, PROJECTUSERS);
    }

    /**
     * Create a <code>public.projectusers</code> table reference
     */
    public Projectusers() {
        this(DSL.name("projectusers"), null);
    }

    public <O extends Record> Projectusers(Table<O> path, ForeignKey<O, ProjectusersRecord> childPath, InverseForeignKey<O, ProjectusersRecord> parentPath) {
        super(path, childPath, parentPath, PROJECTUSERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ProjectusersPath extends Projectusers implements Path<ProjectusersRecord> {
        public <O extends Record> ProjectusersPath(Table<O> path, ForeignKey<O, ProjectusersRecord> childPath, InverseForeignKey<O, ProjectusersRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ProjectusersPath(Name alias, Table<ProjectusersRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ProjectusersPath as(String alias) {
            return new ProjectusersPath(DSL.name(alias), this);
        }

        @Override
        public ProjectusersPath as(Name alias) {
            return new ProjectusersPath(alias, this);
        }

        @Override
        public ProjectusersPath as(Table<?> alias) {
            return new ProjectusersPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ProjectusersRecord, Integer> getIdentity() {
        return (Identity<ProjectusersRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ProjectusersRecord> getPrimaryKey() {
        return Keys.PROJECTUSERS_PKEY;
    }

    @Override
    public List<ForeignKey<ProjectusersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PROJECTUSERS__PROJECTUSERS_USER_ID_FKEY, Keys.PROJECTUSERS__PROJECTUSERS_PROJECT_ID_FKEY);
    }

    private transient BeaverusersPath _beaverusers;

    /**
     * Get the implicit join path to the <code>public.beaverusers</code> table.
     */
    public BeaverusersPath beaverusers() {
        if (_beaverusers == null)
            _beaverusers = new BeaverusersPath(this, Keys.PROJECTUSERS__PROJECTUSERS_USER_ID_FKEY, null);

        return _beaverusers;
    }

    private transient ProjectsPath _projects;

    /**
     * Get the implicit join path to the <code>public.projects</code> table.
     */
    public ProjectsPath projects() {
        if (_projects == null)
            _projects = new ProjectsPath(this, Keys.PROJECTUSERS__PROJECTUSERS_PROJECT_ID_FKEY, null);

        return _projects;
    }

    private transient CommentsPath _comments;

    /**
     * Get the implicit to-many join path to the <code>public.comments</code>
     * table
     */
    public CommentsPath comments() {
        if (_comments == null)
            _comments = new CommentsPath(this, null, Keys.COMMENTS__COMMENTS_USER_ID_FKEY.getInverseKey());

        return _comments;
    }

    private transient TasksPath _tasks;

    /**
     * Get the implicit to-many join path to the <code>public.tasks</code> table
     */
    public TasksPath tasks() {
        if (_tasks == null)
            _tasks = new TasksPath(this, null, Keys.TASKS__TASKS_ASSIGNED_TO_FKEY.getInverseKey());

        return _tasks;
    }

    @Override
    public List<Check<ProjectusersRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("projectusers_user_project_role_check"), "(((user_project_role)::text = ANY ((ARRAY['Member'::character varying, 'Dev'::character varying, 'Project Manager'::character varying, 'Manager'::character varying, 'External'::character varying, 'Manager'::character varying])::text[])))", true)
        );
    }

    @Override
    public Projectusers as(String alias) {
        return new Projectusers(DSL.name(alias), this);
    }

    @Override
    public Projectusers as(Name alias) {
        return new Projectusers(alias, this);
    }

    @Override
    public Projectusers as(Table<?> alias) {
        return new Projectusers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Projectusers rename(String name) {
        return new Projectusers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Projectusers rename(Name name) {
        return new Projectusers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Projectusers rename(Table<?> name) {
        return new Projectusers(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Projectusers where(Condition condition) {
        return new Projectusers(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Projectusers where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Projectusers where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Projectusers where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Projectusers where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Projectusers where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Projectusers where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Projectusers where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Projectusers whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Projectusers whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
