plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'nu.studer.jooq' version '9.0'
}

group = 'org.opm'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

// Ensure jooq same version is used across Spring, jooqGenerator, and joog plugins
ext['jooq.version'] = jooq.version.get()

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    implementation 'com.google.firebase:firebase-admin:9.2.0'
    implementation 'org.jetbrains:annotations:24.0.0'
    implementation 'io.github.cdimascio:dotenv-java:3.0.0'
    implementation 'org.springframework:spring-jdbc:6.1.3'
    jooqGenerator 'org.postgresql:postgresql:42.7.1'
}

// Referenced jooq plugin - https://github.com/etiennestuder/gradle-jooq-plugin
// Build code generated classes by running './gradlew generateJooq'
// Requires DB_USERNAME, DB_PASSWORD, DB_NAME, DB_PORT environment variables
jooq {
    configurations {
        main {
            // Omit task dependency from compileJava to generateJooq
            generateSchemaSourceOnCompilation = false

            generationTool {
                jdbc {
                    driver = 'org.postgresql.Driver'

                    // Define locally, example: 'jdbc:postgresql://localhost:5432/{database_name}
                    url = 'jdbc:postgresql://localhost:' + System.getenv('DB_PORT') + '/' + System.getenv('DB_NAME')

                    // Define locally using DB_USERNAME, DB_PASSWORD
                    user = System.getenv('DB_USERNAME')
                    password = System.getenv('DB_PASSWORD')
                }
                generator {
                    name = 'org.jooq.codegen.JavaGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                    }
                    target {
                        packageName = 'org.opm.busybeaver.jooq'
                        directory = 'src/main/jooq'
                    }
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
            }
        }
    }
}

tasks.named('generateJooq').configure {
    println("CHECK: generateJooq checking for environment variables: DB_USERNAME, DB_PASSWORD, DB_NAME, DB_PORT...")
    onlyIf("Required environment variables: DB_USERNAME, DB_PASSWORD, DB_NAME, DB_PORT") {
        System.getenv('DB_USERNAME') != null
        System.getenv('DB_PASSWORD') != null
        System.getenv('DB_PORT') != null
        System.getenv('DB_NAME') != null
    }
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}
