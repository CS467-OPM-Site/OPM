/*
 * This file is generated by jOOQ.
 */
package org.opm.busybeaver.jooq.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.opm.busybeaver.jooq.Keys;
import org.opm.busybeaver.jooq.Public;
import org.opm.busybeaver.jooq.tables.Columns.ColumnsPath;
import org.opm.busybeaver.jooq.tables.Projectusers.ProjectusersPath;
import org.opm.busybeaver.jooq.tables.Sprints.SprintsPath;
import org.opm.busybeaver.jooq.tables.Tasks.TasksPath;
import org.opm.busybeaver.jooq.tables.Teams.TeamsPath;
import org.opm.busybeaver.jooq.tables.records.ProjectsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Projects extends TableImpl<ProjectsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.projects</code>
     */
    public static final Projects PROJECTS = new Projects();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProjectsRecord> getRecordType() {
        return ProjectsRecord.class;
    }

    /**
     * The column <code>public.projects.project_id</code>.
     */
    public final TableField<ProjectsRecord, Integer> PROJECT_ID = createField(DSL.name("project_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.projects.project_name</code>.
     */
    public final TableField<ProjectsRecord, String> PROJECT_NAME = createField(DSL.name("project_name"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.projects.current_sprint_id</code>.
     */
    public final TableField<ProjectsRecord, Integer> CURRENT_SPRINT_ID = createField(DSL.name("current_sprint_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.projects.team_id</code>.
     */
    public final TableField<ProjectsRecord, Integer> TEAM_ID = createField(DSL.name("team_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private Projects(Name alias, Table<ProjectsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Projects(Name alias, Table<ProjectsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.projects</code> table reference
     */
    public Projects(String alias) {
        this(DSL.name(alias), PROJECTS);
    }

    /**
     * Create an aliased <code>public.projects</code> table reference
     */
    public Projects(Name alias) {
        this(alias, PROJECTS);
    }

    /**
     * Create a <code>public.projects</code> table reference
     */
    public Projects() {
        this(DSL.name("projects"), null);
    }

    public <O extends Record> Projects(Table<O> path, ForeignKey<O, ProjectsRecord> childPath, InverseForeignKey<O, ProjectsRecord> parentPath) {
        super(path, childPath, parentPath, PROJECTS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ProjectsPath extends Projects implements Path<ProjectsRecord> {
        public <O extends Record> ProjectsPath(Table<O> path, ForeignKey<O, ProjectsRecord> childPath, InverseForeignKey<O, ProjectsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ProjectsPath(Name alias, Table<ProjectsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ProjectsPath as(String alias) {
            return new ProjectsPath(DSL.name(alias), this);
        }

        @Override
        public ProjectsPath as(Name alias) {
            return new ProjectsPath(alias, this);
        }

        @Override
        public ProjectsPath as(Table<?> alias) {
            return new ProjectsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ProjectsRecord, Integer> getIdentity() {
        return (Identity<ProjectsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ProjectsRecord> getPrimaryKey() {
        return Keys.PROJECTS_PKEY;
    }

    @Override
    public List<UniqueKey<ProjectsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_PROJECT_PER_TEAM);
    }

    @Override
    public List<ForeignKey<ProjectsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PROJECTS__FK_PROJECT_SPRINT, Keys.PROJECTS__PROJECTS_TEAM_ID_FKEY);
    }

    private transient SprintsPath _sprints;

    /**
     * Get the implicit join path to the <code>public.sprints</code> table.
     */
    public SprintsPath sprints() {
        if (_sprints == null)
            _sprints = new SprintsPath(this, Keys.PROJECTS__FK_PROJECT_SPRINT, null);

        return _sprints;
    }

    private transient TeamsPath _teams;

    /**
     * Get the implicit join path to the <code>public.teams</code> table.
     */
    public TeamsPath teams() {
        if (_teams == null)
            _teams = new TeamsPath(this, Keys.PROJECTS__PROJECTS_TEAM_ID_FKEY, null);

        return _teams;
    }

    private transient ColumnsPath _columns;

    /**
     * Get the implicit to-many join path to the <code>public.columns</code>
     * table
     */
    public ColumnsPath columns() {
        if (_columns == null)
            _columns = new ColumnsPath(this, null, Keys.COLUMNS__COLUMNS_PROJECT_ID_FKEY.getInverseKey());

        return _columns;
    }

    private transient ProjectusersPath _projectusers;

    /**
     * Get the implicit to-many join path to the
     * <code>public.projectusers</code> table
     */
    public ProjectusersPath projectusers() {
        if (_projectusers == null)
            _projectusers = new ProjectusersPath(this, null, Keys.PROJECTUSERS__PROJECTUSERS_PROJECT_ID_FKEY.getInverseKey());

        return _projectusers;
    }

    private transient TasksPath _tasks;

    /**
     * Get the implicit to-many join path to the <code>public.tasks</code> table
     */
    public TasksPath tasks() {
        if (_tasks == null)
            _tasks = new TasksPath(this, null, Keys.TASKS__TASKS_PROJECT_ID_FKEY.getInverseKey());

        return _tasks;
    }

    @Override
    public Projects as(String alias) {
        return new Projects(DSL.name(alias), this);
    }

    @Override
    public Projects as(Name alias) {
        return new Projects(alias, this);
    }

    @Override
    public Projects as(Table<?> alias) {
        return new Projects(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Projects rename(String name) {
        return new Projects(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Projects rename(Name name) {
        return new Projects(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Projects rename(Table<?> name) {
        return new Projects(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Projects where(Condition condition) {
        return new Projects(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Projects where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Projects where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Projects where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Projects where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Projects where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Projects where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Projects where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Projects whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Projects whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
