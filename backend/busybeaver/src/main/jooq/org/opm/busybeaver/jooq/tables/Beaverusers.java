/*
 * This file is generated by jOOQ.
 */
package org.opm.busybeaver.jooq.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.opm.busybeaver.jooq.Keys;
import org.opm.busybeaver.jooq.Public;
import org.opm.busybeaver.jooq.tables.Projectusers.ProjectusersPath;
import org.opm.busybeaver.jooq.tables.Teams.TeamsPath;
import org.opm.busybeaver.jooq.tables.Teamusers.TeamusersPath;
import org.opm.busybeaver.jooq.tables.records.BeaverusersRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Beaverusers extends TableImpl<BeaverusersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.beaverusers</code>
     */
    public static final Beaverusers BEAVERUSERS = new Beaverusers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BeaverusersRecord> getRecordType() {
        return BeaverusersRecord.class;
    }

    /**
     * The column <code>public.beaverusers.user_id</code>.
     */
    public final TableField<BeaverusersRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.beaverusers.email</code>.
     */
    public final TableField<BeaverusersRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.beaverusers.username</code>.
     */
    public final TableField<BeaverusersRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.beaverusers.firebase_id</code>.
     */
    public final TableField<BeaverusersRecord, String> FIREBASE_ID = createField(DSL.name("firebase_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.beaverusers.role</code>.
     */
    public final TableField<BeaverusersRecord, String> ROLE = createField(DSL.name("role"), SQLDataType.VARCHAR(20).defaultValue(DSL.field(DSL.raw("'User'::character varying"), SQLDataType.VARCHAR)), this, "");

    private Beaverusers(Name alias, Table<BeaverusersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Beaverusers(Name alias, Table<BeaverusersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.beaverusers</code> table reference
     */
    public Beaverusers(String alias) {
        this(DSL.name(alias), BEAVERUSERS);
    }

    /**
     * Create an aliased <code>public.beaverusers</code> table reference
     */
    public Beaverusers(Name alias) {
        this(alias, BEAVERUSERS);
    }

    /**
     * Create a <code>public.beaverusers</code> table reference
     */
    public Beaverusers() {
        this(DSL.name("beaverusers"), null);
    }

    public <O extends Record> Beaverusers(Table<O> path, ForeignKey<O, BeaverusersRecord> childPath, InverseForeignKey<O, BeaverusersRecord> parentPath) {
        super(path, childPath, parentPath, BEAVERUSERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class BeaverusersPath extends Beaverusers implements Path<BeaverusersRecord> {
        public <O extends Record> BeaverusersPath(Table<O> path, ForeignKey<O, BeaverusersRecord> childPath, InverseForeignKey<O, BeaverusersRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private BeaverusersPath(Name alias, Table<BeaverusersRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public BeaverusersPath as(String alias) {
            return new BeaverusersPath(DSL.name(alias), this);
        }

        @Override
        public BeaverusersPath as(Name alias) {
            return new BeaverusersPath(alias, this);
        }

        @Override
        public BeaverusersPath as(Table<?> alias) {
            return new BeaverusersPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<BeaverusersRecord, Integer> getIdentity() {
        return (Identity<BeaverusersRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<BeaverusersRecord> getPrimaryKey() {
        return Keys.BEAVERUSERS_PKEY;
    }

    @Override
    public List<UniqueKey<BeaverusersRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.BEAVERUSERS_EMAIL_KEY, Keys.BEAVERUSERS_USERNAME_KEY, Keys.BEAVERUSERS_FIREBASE_ID_KEY);
    }

    private transient ProjectusersPath _projectusers;

    /**
     * Get the implicit to-many join path to the
     * <code>public.projectusers</code> table
     */
    public ProjectusersPath projectusers() {
        if (_projectusers == null)
            _projectusers = new ProjectusersPath(this, null, Keys.PROJECTUSERS__PROJECTUSERS_USER_ID_FKEY.getInverseKey());

        return _projectusers;
    }

    private transient TeamsPath _teams;

    /**
     * Get the implicit to-many join path to the <code>public.teams</code> table
     */
    public TeamsPath teams() {
        if (_teams == null)
            _teams = new TeamsPath(this, null, Keys.TEAMS__TEAMS_TEAM_CREATOR_FKEY.getInverseKey());

        return _teams;
    }

    private transient TeamusersPath _teamusers;

    /**
     * Get the implicit to-many join path to the <code>public.teamusers</code>
     * table
     */
    public TeamusersPath teamusers() {
        if (_teamusers == null)
            _teamusers = new TeamusersPath(this, null, Keys.TEAMUSERS__TEAMUSERS_USER_ID_FKEY.getInverseKey());

        return _teamusers;
    }

    @Override
    public List<Check<BeaverusersRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("beaverusers_role_check"), "(((role)::text = 'User'::text))", true)
        );
    }

    @Override
    public Beaverusers as(String alias) {
        return new Beaverusers(DSL.name(alias), this);
    }

    @Override
    public Beaverusers as(Name alias) {
        return new Beaverusers(alias, this);
    }

    @Override
    public Beaverusers as(Table<?> alias) {
        return new Beaverusers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Beaverusers rename(String name) {
        return new Beaverusers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Beaverusers rename(Name name) {
        return new Beaverusers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Beaverusers rename(Table<?> name) {
        return new Beaverusers(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Beaverusers where(Condition condition) {
        return new Beaverusers(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Beaverusers where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Beaverusers where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Beaverusers where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Beaverusers where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Beaverusers where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Beaverusers where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Beaverusers where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Beaverusers whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Beaverusers whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
