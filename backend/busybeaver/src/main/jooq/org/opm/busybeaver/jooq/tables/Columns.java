/*
 * This file is generated by jOOQ.
 */
package org.opm.busybeaver.jooq.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.opm.busybeaver.jooq.Keys;
import org.opm.busybeaver.jooq.Public;
import org.opm.busybeaver.jooq.tables.Projects.ProjectsPath;
import org.opm.busybeaver.jooq.tables.Tasks.TasksPath;
import org.opm.busybeaver.jooq.tables.records.ColumnsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Columns extends TableImpl<ColumnsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.columns</code>
     */
    public static final Columns COLUMNS = new Columns();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ColumnsRecord> getRecordType() {
        return ColumnsRecord.class;
    }

    /**
     * The column <code>public.columns.column_id</code>.
     */
    public final TableField<ColumnsRecord, Integer> COLUMN_ID = createField(DSL.name("column_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.columns.project_id</code>.
     */
    public final TableField<ColumnsRecord, Integer> PROJECT_ID = createField(DSL.name("project_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.columns.column_title</code>.
     */
    public final TableField<ColumnsRecord, String> COLUMN_TITLE = createField(DSL.name("column_title"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.columns.column_index</code>.
     */
    public final TableField<ColumnsRecord, Short> COLUMN_INDEX = createField(DSL.name("column_index"), SQLDataType.SMALLINT.nullable(false), this, "");

    private Columns(Name alias, Table<ColumnsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Columns(Name alias, Table<ColumnsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.columns</code> table reference
     */
    public Columns(String alias) {
        this(DSL.name(alias), COLUMNS);
    }

    /**
     * Create an aliased <code>public.columns</code> table reference
     */
    public Columns(Name alias) {
        this(alias, COLUMNS);
    }

    /**
     * Create a <code>public.columns</code> table reference
     */
    public Columns() {
        this(DSL.name("columns"), null);
    }

    public <O extends Record> Columns(Table<O> path, ForeignKey<O, ColumnsRecord> childPath, InverseForeignKey<O, ColumnsRecord> parentPath) {
        super(path, childPath, parentPath, COLUMNS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ColumnsPath extends Columns implements Path<ColumnsRecord> {
        public <O extends Record> ColumnsPath(Table<O> path, ForeignKey<O, ColumnsRecord> childPath, InverseForeignKey<O, ColumnsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ColumnsPath(Name alias, Table<ColumnsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ColumnsPath as(String alias) {
            return new ColumnsPath(DSL.name(alias), this);
        }

        @Override
        public ColumnsPath as(Name alias) {
            return new ColumnsPath(alias, this);
        }

        @Override
        public ColumnsPath as(Table<?> alias) {
            return new ColumnsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ColumnsRecord, Integer> getIdentity() {
        return (Identity<ColumnsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ColumnsRecord> getPrimaryKey() {
        return Keys.COLUMNS_PKEY;
    }

    @Override
    public List<UniqueKey<ColumnsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_COLUMN_PER_PROJECT);
    }

    @Override
    public List<ForeignKey<ColumnsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.COLUMNS__COLUMNS_PROJECT_ID_FKEY);
    }

    private transient ProjectsPath _projects;

    /**
     * Get the implicit join path to the <code>public.projects</code> table.
     */
    public ProjectsPath projects() {
        if (_projects == null)
            _projects = new ProjectsPath(this, Keys.COLUMNS__COLUMNS_PROJECT_ID_FKEY, null);

        return _projects;
    }

    private transient TasksPath _tasks;

    /**
     * Get the implicit to-many join path to the <code>public.tasks</code> table
     */
    public TasksPath tasks() {
        if (_tasks == null)
            _tasks = new TasksPath(this, null, Keys.TASKS__TASKS_COLUMN_ID_FKEY.getInverseKey());

        return _tasks;
    }

    @Override
    public Columns as(String alias) {
        return new Columns(DSL.name(alias), this);
    }

    @Override
    public Columns as(Name alias) {
        return new Columns(alias, this);
    }

    @Override
    public Columns as(Table<?> alias) {
        return new Columns(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Columns rename(String name) {
        return new Columns(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Columns rename(Name name) {
        return new Columns(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Columns rename(Table<?> name) {
        return new Columns(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Columns where(Condition condition) {
        return new Columns(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Columns where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Columns where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Columns where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Columns where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Columns where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Columns where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Columns where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Columns whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Columns whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
