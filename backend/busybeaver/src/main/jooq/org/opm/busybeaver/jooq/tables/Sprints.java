/*
 * This file is generated by jOOQ.
 */
package org.opm.busybeaver.jooq.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.opm.busybeaver.jooq.Keys;
import org.opm.busybeaver.jooq.Public;
import org.opm.busybeaver.jooq.tables.Projects.ProjectsPath;
import org.opm.busybeaver.jooq.tables.Tasks.TasksPath;
import org.opm.busybeaver.jooq.tables.records.SprintsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Sprints extends TableImpl<SprintsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.sprints</code>
     */
    public static final Sprints SPRINTS = new Sprints();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SprintsRecord> getRecordType() {
        return SprintsRecord.class;
    }

    /**
     * The column <code>public.sprints.sprint_id</code>.
     */
    public final TableField<SprintsRecord, Integer> SPRINT_ID = createField(DSL.name("sprint_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.sprints.sprint_name</code>.
     */
    public final TableField<SprintsRecord, String> SPRINT_NAME = createField(DSL.name("sprint_name"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.sprints.project_id</code>.
     */
    public final TableField<SprintsRecord, Integer> PROJECT_ID = createField(DSL.name("project_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.sprints.begin_date</code>.
     */
    public final TableField<SprintsRecord, LocalDate> BEGIN_DATE = createField(DSL.name("begin_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.sprints.end_date</code>.
     */
    public final TableField<SprintsRecord, LocalDate> END_DATE = createField(DSL.name("end_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    private Sprints(Name alias, Table<SprintsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Sprints(Name alias, Table<SprintsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.sprints</code> table reference
     */
    public Sprints(String alias) {
        this(DSL.name(alias), SPRINTS);
    }

    /**
     * Create an aliased <code>public.sprints</code> table reference
     */
    public Sprints(Name alias) {
        this(alias, SPRINTS);
    }

    /**
     * Create a <code>public.sprints</code> table reference
     */
    public Sprints() {
        this(DSL.name("sprints"), null);
    }

    public <O extends Record> Sprints(Table<O> path, ForeignKey<O, SprintsRecord> childPath, InverseForeignKey<O, SprintsRecord> parentPath) {
        super(path, childPath, parentPath, SPRINTS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SprintsPath extends Sprints implements Path<SprintsRecord> {
        public <O extends Record> SprintsPath(Table<O> path, ForeignKey<O, SprintsRecord> childPath, InverseForeignKey<O, SprintsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SprintsPath(Name alias, Table<SprintsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SprintsPath as(String alias) {
            return new SprintsPath(DSL.name(alias), this);
        }

        @Override
        public SprintsPath as(Name alias) {
            return new SprintsPath(alias, this);
        }

        @Override
        public SprintsPath as(Table<?> alias) {
            return new SprintsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<SprintsRecord, Integer> getIdentity() {
        return (Identity<SprintsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SprintsRecord> getPrimaryKey() {
        return Keys.SPRINTS_PKEY;
    }

    @Override
    public List<UniqueKey<SprintsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_SPRINT_DATES_PER_PROJECT);
    }

    @Override
    public List<ForeignKey<SprintsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SPRINTS__SPRINTS_PROJECT_ID_FKEY);
    }

    private transient ProjectsPath _projects;

    /**
     * Get the implicit join path to the <code>public.projects</code> table.
     */
    public ProjectsPath projects() {
        if (_projects == null)
            _projects = new ProjectsPath(this, Keys.SPRINTS__SPRINTS_PROJECT_ID_FKEY, null);

        return _projects;
    }

    private transient TasksPath _tasks;

    /**
     * Get the implicit to-many join path to the <code>public.tasks</code> table
     */
    public TasksPath tasks() {
        if (_tasks == null)
            _tasks = new TasksPath(this, null, Keys.TASKS__TASKS_SPRINT_ID_FKEY.getInverseKey());

        return _tasks;
    }

    @Override
    public Sprints as(String alias) {
        return new Sprints(DSL.name(alias), this);
    }

    @Override
    public Sprints as(Name alias) {
        return new Sprints(alias, this);
    }

    @Override
    public Sprints as(Table<?> alias) {
        return new Sprints(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sprints rename(String name) {
        return new Sprints(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sprints rename(Name name) {
        return new Sprints(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sprints rename(Table<?> name) {
        return new Sprints(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sprints where(Condition condition) {
        return new Sprints(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sprints where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sprints where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sprints where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Sprints where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Sprints where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Sprints where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Sprints where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sprints whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sprints whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
