/*
 * This file is generated by jOOQ.
 */
package org.opm.busybeaver.jooq.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.opm.busybeaver.jooq.Keys;
import org.opm.busybeaver.jooq.Public;
import org.opm.busybeaver.jooq.tables.Beaverusers.BeaverusersPath;
import org.opm.busybeaver.jooq.tables.Teams.TeamsPath;
import org.opm.busybeaver.jooq.tables.records.TeamusersRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Teamusers extends TableImpl<TeamusersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.teamusers</code>
     */
    public static final Teamusers TEAMUSERS = new Teamusers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TeamusersRecord> getRecordType() {
        return TeamusersRecord.class;
    }

    /**
     * The column <code>public.teamusers.user_team_id</code>.
     */
    public final TableField<TeamusersRecord, Integer> USER_TEAM_ID = createField(DSL.name("user_team_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.teamusers.user_id</code>.
     */
    public final TableField<TeamusersRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.teamusers.team_id</code>.
     */
    public final TableField<TeamusersRecord, Integer> TEAM_ID = createField(DSL.name("team_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.teamusers.user_team_role</code>.
     */
    public final TableField<TeamusersRecord, String> USER_TEAM_ROLE = createField(DSL.name("user_team_role"), SQLDataType.VARCHAR(20).defaultValue(DSL.field(DSL.raw("'User'::character varying"), SQLDataType.VARCHAR)), this, "");

    private Teamusers(Name alias, Table<TeamusersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Teamusers(Name alias, Table<TeamusersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.teamusers</code> table reference
     */
    public Teamusers(String alias) {
        this(DSL.name(alias), TEAMUSERS);
    }

    /**
     * Create an aliased <code>public.teamusers</code> table reference
     */
    public Teamusers(Name alias) {
        this(alias, TEAMUSERS);
    }

    /**
     * Create a <code>public.teamusers</code> table reference
     */
    public Teamusers() {
        this(DSL.name("teamusers"), null);
    }

    public <O extends Record> Teamusers(Table<O> path, ForeignKey<O, TeamusersRecord> childPath, InverseForeignKey<O, TeamusersRecord> parentPath) {
        super(path, childPath, parentPath, TEAMUSERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TeamusersPath extends Teamusers implements Path<TeamusersRecord> {
        public <O extends Record> TeamusersPath(Table<O> path, ForeignKey<O, TeamusersRecord> childPath, InverseForeignKey<O, TeamusersRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TeamusersPath(Name alias, Table<TeamusersRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TeamusersPath as(String alias) {
            return new TeamusersPath(DSL.name(alias), this);
        }

        @Override
        public TeamusersPath as(Name alias) {
            return new TeamusersPath(alias, this);
        }

        @Override
        public TeamusersPath as(Table<?> alias) {
            return new TeamusersPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<TeamusersRecord, Integer> getIdentity() {
        return (Identity<TeamusersRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TeamusersRecord> getPrimaryKey() {
        return Keys.TEAMUSERS_PKEY;
    }

    @Override
    public List<ForeignKey<TeamusersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TEAMUSERS__TEAMUSERS_USER_ID_FKEY, Keys.TEAMUSERS__TEAMUSERS_TEAM_ID_FKEY);
    }

    private transient BeaverusersPath _beaverusers;

    /**
     * Get the implicit join path to the <code>public.beaverusers</code> table.
     */
    public BeaverusersPath beaverusers() {
        if (_beaverusers == null)
            _beaverusers = new BeaverusersPath(this, Keys.TEAMUSERS__TEAMUSERS_USER_ID_FKEY, null);

        return _beaverusers;
    }

    private transient TeamsPath _teams;

    /**
     * Get the implicit join path to the <code>public.teams</code> table.
     */
    public TeamsPath teams() {
        if (_teams == null)
            _teams = new TeamsPath(this, Keys.TEAMUSERS__TEAMUSERS_TEAM_ID_FKEY, null);

        return _teams;
    }

    @Override
    public List<Check<TeamusersRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("teamusers_user_team_role_check"), "(((user_team_role)::text = ANY ((ARRAY['User'::character varying, 'Creator'::character varying, 'Mod'::character varying])::text[])))", true)
        );
    }

    @Override
    public Teamusers as(String alias) {
        return new Teamusers(DSL.name(alias), this);
    }

    @Override
    public Teamusers as(Name alias) {
        return new Teamusers(alias, this);
    }

    @Override
    public Teamusers as(Table<?> alias) {
        return new Teamusers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Teamusers rename(String name) {
        return new Teamusers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Teamusers rename(Name name) {
        return new Teamusers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Teamusers rename(Table<?> name) {
        return new Teamusers(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Teamusers where(Condition condition) {
        return new Teamusers(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Teamusers where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Teamusers where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Teamusers where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Teamusers where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Teamusers where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Teamusers where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Teamusers where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Teamusers whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Teamusers whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
