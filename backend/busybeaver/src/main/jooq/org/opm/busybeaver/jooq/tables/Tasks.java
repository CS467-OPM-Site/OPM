/*
 * This file is generated by jOOQ.
 */
package org.opm.busybeaver.jooq.tables;


import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.opm.busybeaver.jooq.Keys;
import org.opm.busybeaver.jooq.Public;
import org.opm.busybeaver.jooq.tables.Columns.ColumnsPath;
import org.opm.busybeaver.jooq.tables.Comments.CommentsPath;
import org.opm.busybeaver.jooq.tables.Projects.ProjectsPath;
import org.opm.busybeaver.jooq.tables.Projectusers.ProjectusersPath;
import org.opm.busybeaver.jooq.tables.Sprints.SprintsPath;
import org.opm.busybeaver.jooq.tables.records.TasksRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Tasks extends TableImpl<TasksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.tasks</code>
     */
    public static final Tasks TASKS = new Tasks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TasksRecord> getRecordType() {
        return TasksRecord.class;
    }

    /**
     * The column <code>public.tasks.task_id</code>.
     */
    public final TableField<TasksRecord, Integer> TASK_ID = createField(DSL.name("task_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.tasks.sprint_id</code>.
     */
    public final TableField<TasksRecord, Integer> SPRINT_ID = createField(DSL.name("sprint_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.tasks.assigned_to</code>.
     */
    public final TableField<TasksRecord, Integer> ASSIGNED_TO = createField(DSL.name("assigned_to"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.tasks.column_id</code>.
     */
    public final TableField<TasksRecord, Integer> COLUMN_ID = createField(DSL.name("column_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.tasks.project_id</code>.
     */
    public final TableField<TasksRecord, Integer> PROJECT_ID = createField(DSL.name("project_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.tasks.priority</code>.
     */
    public final TableField<TasksRecord, String> PRIORITY = createField(DSL.name("priority"), SQLDataType.VARCHAR(20).defaultValue(DSL.field(DSL.raw("'None'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.tasks.due_date</code>.
     */
    public final TableField<TasksRecord, LocalDate> DUE_DATE = createField(DSL.name("due_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.tasks.title</code>.
     */
    public final TableField<TasksRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.tasks.description</code>.
     */
    public final TableField<TasksRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(500), this, "");

    /**
     * The column <code>public.tasks.custom_fields</code>.
     */
    public final TableField<TasksRecord, JSONB> CUSTOM_FIELDS = createField(DSL.name("custom_fields"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>public.tasks.task_created</code>.
     */
    public final TableField<TasksRecord, LocalDateTime> TASK_CREATED = createField(DSL.name("task_created"), SQLDataType.LOCALDATETIME(6), this, "");

    private Tasks(Name alias, Table<TasksRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Tasks(Name alias, Table<TasksRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.tasks</code> table reference
     */
    public Tasks(String alias) {
        this(DSL.name(alias), TASKS);
    }

    /**
     * Create an aliased <code>public.tasks</code> table reference
     */
    public Tasks(Name alias) {
        this(alias, TASKS);
    }

    /**
     * Create a <code>public.tasks</code> table reference
     */
    public Tasks() {
        this(DSL.name("tasks"), null);
    }

    public <O extends Record> Tasks(Table<O> path, ForeignKey<O, TasksRecord> childPath, InverseForeignKey<O, TasksRecord> parentPath) {
        super(path, childPath, parentPath, TASKS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TasksPath extends Tasks implements Path<TasksRecord> {
        public <O extends Record> TasksPath(Table<O> path, ForeignKey<O, TasksRecord> childPath, InverseForeignKey<O, TasksRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TasksPath(Name alias, Table<TasksRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TasksPath as(String alias) {
            return new TasksPath(DSL.name(alias), this);
        }

        @Override
        public TasksPath as(Name alias) {
            return new TasksPath(alias, this);
        }

        @Override
        public TasksPath as(Table<?> alias) {
            return new TasksPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<TasksRecord, Integer> getIdentity() {
        return (Identity<TasksRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TasksRecord> getPrimaryKey() {
        return Keys.TASKS_PKEY;
    }

    @Override
    public List<ForeignKey<TasksRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TASKS__TASKS_SPRINT_ID_FKEY, Keys.TASKS__TASKS_ASSIGNED_TO_FKEY, Keys.TASKS__TASKS_COLUMN_ID_FKEY, Keys.TASKS__TASKS_PROJECT_ID_FKEY);
    }

    private transient SprintsPath _sprints;

    /**
     * Get the implicit join path to the <code>public.sprints</code> table.
     */
    public SprintsPath sprints() {
        if (_sprints == null)
            _sprints = new SprintsPath(this, Keys.TASKS__TASKS_SPRINT_ID_FKEY, null);

        return _sprints;
    }

    private transient ProjectusersPath _projectusers;

    /**
     * Get the implicit join path to the <code>public.projectusers</code> table.
     */
    public ProjectusersPath projectusers() {
        if (_projectusers == null)
            _projectusers = new ProjectusersPath(this, Keys.TASKS__TASKS_ASSIGNED_TO_FKEY, null);

        return _projectusers;
    }

    private transient ColumnsPath _columns;

    /**
     * Get the implicit join path to the <code>public.columns</code> table.
     */
    public ColumnsPath columns() {
        if (_columns == null)
            _columns = new ColumnsPath(this, Keys.TASKS__TASKS_COLUMN_ID_FKEY, null);

        return _columns;
    }

    private transient ProjectsPath _projects;

    /**
     * Get the implicit join path to the <code>public.projects</code> table.
     */
    public ProjectsPath projects() {
        if (_projects == null)
            _projects = new ProjectsPath(this, Keys.TASKS__TASKS_PROJECT_ID_FKEY, null);

        return _projects;
    }

    private transient CommentsPath _comments;

    /**
     * Get the implicit to-many join path to the <code>public.comments</code>
     * table
     */
    public CommentsPath comments() {
        if (_comments == null)
            _comments = new CommentsPath(this, null, Keys.COMMENTS__COMMENTS_TASK_ID_FKEY.getInverseKey());

        return _comments;
    }

    @Override
    public List<Check<TasksRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("tasks_priority_check"), "(((priority)::text = ANY ((ARRAY['None'::character varying, 'Low'::character varying, 'Medium'::character varying, 'High'::character varying])::text[])))", true)
        );
    }

    @Override
    public Tasks as(String alias) {
        return new Tasks(DSL.name(alias), this);
    }

    @Override
    public Tasks as(Name alias) {
        return new Tasks(alias, this);
    }

    @Override
    public Tasks as(Table<?> alias) {
        return new Tasks(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tasks rename(String name) {
        return new Tasks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tasks rename(Name name) {
        return new Tasks(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tasks rename(Table<?> name) {
        return new Tasks(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tasks where(Condition condition) {
        return new Tasks(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tasks where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tasks where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tasks where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tasks where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tasks where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tasks where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tasks where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tasks whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tasks whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
